= アジャイルではリカバリーってどうやるの？

//flushright{
松永 広明
//}

ある日の研修で、受講生のひとりからこんな質問をもらいました。

「アジャイルでは、遅れが出た場合のリカバリーはどうやるのでしょうか？」

うーん、実によい、趣のある深い質問です。実に深い。松崎しげ●の目尻のしわのように深いです（事実無根）。

この問題を理解するには、いくつかのステップが必要です。まずはそれをあげてみます。

 1. アジャイルは価値が大事、アウトプットよりアウトカム
 2. スプリントの目的は「スプリントゴール」
 3. 価値をできるだけ毀損せず、やらなくてもよいことを最大化せよ

順に解説します。


== アジャイルではアウトプットよりアウトカムが大事

「アウトプット」は、プロジェクトなどの活動から生み出される直接の結果や成果物のことです。一方で「アウトカム」は、その活動の成果として、自身や顧客に生じる利益や変化のことです。

図にすると、〓図7.1〓のようなイメージです。

//image[image1][ロジックモデル][scale=1.0]

ソフトウェア開発でいえば、インプットはお金だったり開発者たちの工数だったりします。アウトプットはアクティビティ、すなわち日々の開発作業から作られたソフトウェアシステムそのものです。アウトカムは、そのシステムを使うことで得られる利益や、削減できるコストや、生活の変化だったりするわけです。

Return On Investment（ROI）という言葉があります。日本語だと投資対効果などといったりしますが、これはその投資に対して、どれだけの利益が得られるのかを示す数値です。数値が大きいほど、効果が高い投資だということを示します。計算式は次のとおりです。


//texequation{
ROI = \frac{R}{I}
//}

簡単ですね。いくらReturnが大きくても、Investmentも大きいと、ROIすなわち投資効果は減ってしまうことがわかります。つまり、ビジネスにおいては単にReturnがあることだけが大事なわけではなく、Investmentが極力少ないものである必要があることがわかると思います。

では、〓図7.1〓において、Investmentはどれで、Returnはどれでしょう。Returnというのはその活動の成果として得られる利益などを指すのですから、この図でいえば「Return」は一番右の「アウトカム」だけとなります。わかりますか。みなさんが作っているソフトウェアシステムは、作って納入するだけで価値があるわけではなく、運用されて、なんらかの効果が得られて、はじめて「Return」、すなわち価値となり得るわけです。ソフトウェアシステムは、それ単体では「Investment」、つまり投資にすぎないということです。ええ～そんなあ～。

そしてさらに、分母であるInvestmentが小さいほうがROIは大きくなるので、みなさんはなるべく仕事をしないほどよいということになりますね。やったぜ！
 
//image[image3][ROIの最大化][scale=1.0]

でも別の見方をすると、アウトプットをいくらたくさん生み出しても、それがアウトカムにつながらなければなんの意味もないどころか、お金の無駄づかいだったということになりますね。価値がゼロのものをどれだけたくさん作っても、ゼロはゼロです。逆にいうと、大きなアウトカムが得られるなら、アウトプットは小さくシンプルであるほうがよいということになります。


== スプリントの目的は「スプリントゴール」

〓前節〓からわかるとおり、スプリントの目的は価値を生み出すことであり、ソフトウェアを作ることではありません。スクラムでは、スプリントで生み出されるこの「価値」をスプリントゴールとして設定するわけです。スプリントの目的は、より多くの機能を作るとか、より長時間働くとか、計画された機能をすべて完成させるとかではなく、価値を届けることだといえます。スプリントゴールとは、スプリントの「Why」です。「『なぜ』そのスプリントをやるのか？」です。つまり、スプリントゴールとは、そのスプリントが生み出そうとしている「価値」だということです。

ここで価値について考えてみます

筆者は、大好きなLiSA（歌手）さんがCatch the momentのリリースイベントで手渡してくれたサイン入りポストカードを持っています（2枚！）。彼女はこのサインをものの数秒で書き上げます。これなんて、売れば数万円ぐらいの値がついてもおかしくありません（絶対にそんなことはしませんが）。数秒で数万円、例えば5秒で5万円とすると、1分で60万円（！）の価値を生むのです。ですがそんなことよりも、彼女とほんの短時間でも直接目をあわせて、会話をしながら手渡してもらったという思い出が詰まっていて、実際のところPricelessです。つまり、価値というのは、単純に作業時間や作業量とは単純にリニアに変換できるものではないということです。

〓前項〓の解説によると、スプリントゴールさえ達成できるならば、スプリントプランニングで作ると決めた機能が、決めたとおりにすべて完成していなくてもよいことになりますよね。「目的が達成できるなら、手段はひとつじゃないよね？」ということです。

== やらなくてもよいことを最大化せよ
アジャイル宣言にはこういう記述があります。あえて英語版で書きます。

//quote{
    Simplicity--the art of maximizing the amount of work not done--is essential.
//}

筆者なりに意訳すると、「やらなくてもよいことを最大化する技術が不可欠」という意味です。やらないことの最大化というのは、言い換えると、やることを最小限にしろということです。これは、前述のInvestmentを最小化せよという話と符合します。そのためには、シンプルさが必要だとアジャイル宣言は説いているわけです。一方で、いくらやることを減らすといっても、価値まで減らしてはいけないので、そのためによりシンプルなソリューションを考え、スプリントゴールで策定した価値を毀損することなく、やることを最小化すべしといっているわけです。

例えば、「当初フリーワード検索で考えていたけど、よく考えたら選択肢は5つしかないから、これだったらチェックボックスかラジオボタンでよくない？」となります。たぶんそのほうが、文字コードチェックなどもいらないので実装も簡単ですし、なおかつ必要なものを検索するという当初の価値はまったく失われていません。

これぐらいの単純な例ならよいですが、実際にはシンプルかつ価値の高いソフトウェアを作るというのは、けっこう大変です。まず、顧客が何を価値だと感じているのかをよく知ることが必要です。顧客は自分にとっての価値がなんなのか、実はよくわかっていなかったりするので、単にヒアリングするだけではなく、本当の意味で顧客に寄り添う必要があります。また、シンプルな設計というのは、実は最も難しかったりします。読みやすく理解しやすいコードだったり、結合度が低くて凝集度が高く、変更容易性の高い設計だったり、日々リファクタリングを重ねて、常にシンプルさを保つ努力が必要です。

アジャイル宣言にもこう言及されています。

//quote{
    技術的卓越性と優れた設計に対する不断の注意が機敏さを高めます。
//}


== アジャイルでリカバリーってどうやるの？

冒頭のこの質問に戻ります。

極論すれば、アジャイルは「いかにして作らずにすませるか」の技術です。よく「アジャイルでは何をやるかよりも、何をやらないかのほうが大事」といったことがいわれます。やらなくてよいことはやらない、作らなくてもよいものは作らない。いたずらに仕事の量を追うのではなく、その価値を見極めて、本当に必要なことだけをやっていけば、ものごとはシンプルになるということです。そうして、いかに少ないコードで大きな価値を出すか（つまりROI）を考えていくと、作業時間も短くすることができるかもしれません。アジャイル開発では、そうやってリカバリーを行うのです。もちろんそれだけとは限らないし、それがうまくいかない場合もあるのは否定しませんが。

そもそも、冒頭の質問の背景には、従来型開発で骨の髄まで染みついた「コストと納期とスコープは守り通さねばならない」という考え方があると思います。つまり、スプリントプランニングで作ると決めた機能は、スプリント終了までに決めたとおりにすべて作らなくてはならないという考え方をしているのだと思うのです。

こういう考え方だと、遅延が出てしまった場合は、残業をしてリカバリーするしかなくなってしまいます。残業は最悪です。残業は、何か問題があったときに、安易にその場しのぎのリカバリーをする方法です。こういった方法が恒常化しているチームは、問題（この場合は遅延）の根本的な原因にリーチしようとしないので、改善していかないのです。アジャイル宣言にある「サステナブル・ペース」にも反しますね。なので、生産性があがらないといっているチームのコーチに入ったときに、私が最初にコーチすることは、残業を禁止にすることだったりします。こうすることで、彼らはいかに残業をせずに問題を解決するかを考えるようになります。


== まとめ

まとめます。

 * 価値と量、価値と時間はリニアに変換できない
 * ROIを高めるためには、仕事の量や時間は極力おさえよう
 * シンプルな仕事をすることで、価値を毀損せずに量や時間をおさえることが可能となる 
 * リカバリーのために残業をするのは悪手



　

//embed{
    \begin{minipage}{.1\linewidth}
        \centering
        \includegraphics[width=.75\linewidth]{images/chap-matsunaga/matsunaga.jpg}
    \end{minipage}
    \begin{minipage}{.89\linewidth}
        松永 広明 @qoragile https://twitter.com/lsaconsul\\
        LSA CONSULTiNG株式会社　代表取締役
        \end{minipage}
    \hspace{1ex}
//}


https://www.facebook.com/lsaconsul

https://www.linkedin.com/in/lsaconsulting/

