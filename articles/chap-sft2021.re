= アジャイルで幸せになれるのか ～IT古典良書を読み解く：『初めてのアジャイル開発～スクラム、XP、UP、Evoで学ぶ反復型開発の進め方～』編～

@<strong>{}

//flushright{
伊藤慶紀
//}

== 本書との出会い


//quote{
健康とは、できる限りゆっくりとした速度で死に向かうことでしかない。@<fn>{chp3}
//}

//footnote[chp3][『初めてのアジャイル開発～スクラム、XP、UP、Evoで学ぶ反復型開発の進め方～』、第3章「アジャイル」）より]

IT古典良書を読み解くということで、Craig Larmanの『初めてのアジャイル開発 スクラム、XP、UP、Evoで学ぶ反復開発の進め方』（日経BP,2004）@<fn>{hajimete}を紹介します。なぜか各章の最初に名言が表示されていて、冒頭の名言は第3章「アジャイルか」らの引用になります。

//footnote[hajimete][以下、『初めてのアジャイル開発』]


//image[bookcover][初めてのアジャイル開発書影][scale=0.25]


当時、筆者はまだまだ若輩者のエンジニアでした。いくつかのプロジェクト開発を経験し、規模の差はありますが、必ずといってよいほど炎上していました。原因は、終盤で仕様変更が入ったり、追加漏れがあったり、大きな障害が見つかったりとさまざまでした。なんとか納期に間に合っても、開発陣はボロボロ、顧客も望んでいたシステムとはズレがあっても、これでヨシとする風潮が当時の（ひょっとして、今も！？）ソフトウェア業界でした。


なんとかならないものかと考え、アジャイル開発やテスト駆動開発などに興味を持ち、独学で勉強しはじめます。当時、「＠IT ITアーキテクト塾 テストファーストの実践」@<fn>{atit}で、パネラーから紹介されていた書籍の1つが、先ほどの『初めてのアジャイル開発』です。読んでみると、いろいろと疑問に思っていたことがスッキリしたことを覚えています。

探したら、該当記事がありました。懐かしいですが本質は変わっていないですね。アジャイルは黎明期で、スクラムとXPを組み合わせるのが流行っていました。ペアプログラミング以外は、今でも使うべきかと。また、テスターが必要とも書かれています。

//footnote[atit][@<href>{https://www.itmedia.co.jp/im/articles/0602/24/news137.html, https://www.itmedia.co.jp/im/articles/0602/24/news137.html}]

== アジャイルは誇大広告か


アジャイルは誇大広告という話があります。「以前からある考え方（反復型など）を誇大広告して再利用しているだけなのでは？」という問いです。それに対し、『初めてのアジャイル開発』では「YESでもありNOでもある」と書かれています。


どういうことかというと、いわゆるアジャイルな考え方は一昔前の再利用であるため、一面では「YES」だが、スクラムなどの原則やプラクティスを全体としてみると新しいものなので、「NO」ということです。

ここで学べることは、アジャイルをバズワードのように用いると、いわゆる「なんちゃってアジャイル」となり、「話がちがうじゃないか」と、まさに誇大広告@<fn>{kodai}になってしまい、誰も幸せになれない結果になります。正しくアジャイルを用いることで、誰しも幸せになれる可能性があがるということです。


今回はアジャイルの代表的な手法である「スクラム」に関する用語が出てきますので、用語の意味を学んでおくとよりわかりやすいですが、知らなくても考え方は伝わるかと思います。

//footnote[kodai][誇大広告といえば個人的には「ビッグデータ」を思い出します。バズワード化した時期に導入して効果をあげた企業が一体何社あるのか……。また、「M2M（Machine to Machine）」がいつの間にか「IoT（Internet of Things）」と言葉を変えて領域を増やしたりと、IT業界は不思議な流行りの用語が飛び交います。]

== アジャイルを導入する主な理由


よく聞かれる質問に、「じゃあ、アジャイルにはどんなメリットがあるの？」があります。これにどう答えるのがよいのでしょうか。第5章「導入理由」にあるアジャイル導入理由の見出しから、特に大事だというものを見ていきましょう。 


@<strong>{・反復型開発のほうがリスクが低く、ウォーターフォール型のほうがリスクが高い}


　→　リスクが高い工程が先に来るのがアジャイル、あとに来るのがウォーターフォールとなっています。リスクグラフを見るとわかりやすいです。


//image[wf][リスクグラフ：ウォーターフォール][scale=0.45]


//image[agile][リスクグラフ：アジャイル][scale=0.45]

@<strong>{・最終製品がクライアントの真の希望に適ったものになる}

→　早い段階で評価やフィードバックを繰り返すため、製品が望んだものになる可能性が高くなります。これが、いつも筆者がウォーターフォールでモヤモヤしていた「顧客が望まないものがリリースされる」ことを解決する方法になると考えています。

@<strong>{・タイムボックスの利点}


→　アジャイルは短い期間で区切って開発をします。タイムボックスを導入するだけで、生産性があがるという利点があるそうです。いくつか理由があります。まずは「集中」。締め切りギリギリのときに驚くべき生産性を出す方も多いでしょう。締切までの時間が長いと人はだらけてしまうようです。また、タスクを現実的に対処できる程度のものに縮小し、困難な決定を早く行うようになる効果があるようです。


そして、もう1つタイムボックスの価値は、人間の不思議な習性に関連するとのことです。それは、@<strong>{人は期限を守れなかったことはよく覚えているが、内容が少しぐらい不足していても気にはしない}というものです。100％を要求するウォーターフォールと、優先順位が高い機能から作成し、75％でも納期にリリースできるアジャイルを表しているようです。

== アジャイルを使って失敗する方法


いざ、アジャイル開発をはじめても、失敗することはあります。どうすると失敗するのかを知っておけば、事前に防げるかもしれません。

ここでは、代表的なアジャイル手法であるスクラムを使って失敗する方法を取り上げました」（第7章「スクラム」）。

@<strong>{・自律的なチームでない。マネージャーまたはスクラムマスターを指揮・編成している}



　→　こちらは、立ち上げではとても難しいです。マネージャーは解決策を提示して指示しないといけないと思いますし、メンバーは逆に指示を仰ぎがちになってしまいます。徐々にでもよいので、自律的なチームを作っていきましょう。個人的に一番よくないことが、決めたスプリントバックログを必ず終えるために、スプリント内でスコープ調整などをせずに、ウォータフォールのように稼働をあげて対応してしまうことです。

@<strong>{・スプリントや個人に対して新しい作業が追加される}


　→　スプリント中は要求を変更しないことが大前提です。しかし、緊急でどうしても必要な変更であるという場合は、バックロググルーミングなどを使いタスク調整・仕様調整をすることが大事だと考えます。気軽に追加・変更ができるようでは、スプリントの意味がありません。

@<strong>{・プロダクトオーナーが参加していない、あるいは判断を下していない}


　→　ほかにもプロダクトオーナーが複数存在したり、最終意思決定ができなかったりといった問題も散見されます。個人的には、プロダクトオーナーの意識、熱量不足があるとうまく回らないことが多いようです。

@<strong>{・ドキュメントが不十分である}


　→　アジャイル開発では、ドキュメントを作らなくてよいという話を聞いた方も多いかと思います。しかしが、反文章主義ではなく、成果物として定義していないだけであり、価値があるのであれば作成するべきです。


すでにアジャイル開発を行っている方もいると思いますが、前述のリストに思い当たる節がない方！ おめでとうございます！ 「アジャイルで幸せになれる」を体現できるはずです。
逆に思い当たる節だらけの方、すでにさまざまな歪みが起きていると思います。勇気を持って変革していきましょう。

== 莫邪の剣も持ち手による


「莫邪の剣（ばくやのつるぎ）も持ち手による」@<fn>{bakuya}という言葉があります。どんなに優れた名刀でも、持ち手が臆病であったりすると、その真価が発揮できないという意味になります。アジャイルは確かに優れた武器ですが、使い方を誤ると、その真価が発揮できません。結果が出ないからと次々とサービスや商品を乗り換える方もいますが、使う側に問題があるというのは往々にしてあることです。

//footnote[bakuya][「莫邪の剣も持ち手による」。武器はよくても使う人がダメだと効果が発揮できないという意味。「宝の持ち腐れ」ではしっくりこないのでよりよいことわざはないかなと探したところ、ぴったりのものを見つけた次第です。筆者もはじめて使いました。]


結論としては、「アジャイルで幸せになれるが、持ち手による」ということでしょう。


最後に、スクラムが成功する価値について、第7章「スクラム」より、特に大事な箇所を引用します。なお、一部の用語をわかりやすいよう現代風にあらためています。

よい持ち手になりましょう。


@<strong>{・コミットすること}

//quote{
スクラムチームは、そのスプリントの目標を達成することをコミットする代わりに、達成するにはどうするのが一番よいかを自分たちで判断する権限と自治権が与えられる。経営陣とスクラムマスターは、スプリントに新しい作業を追加しないこと、チームに指図しないこと、リソースを提供しデイリースクラムであげられた障害を迅速に取り除くことをコミットする。プロダクトオーナーは、プロダクトバックログを定義して、その優先順位をつけ、次のスプリントの目標を選択するときにチームを導き、各スプリントの結果をレビューしてフィードバックすることをコミットする。
//}

@<strong>{・敬意を払うこと}

//quote{
または責任転嫁するのではなく、チームで責任を持つこと。チームのメンバーがそれぞれの長所／短所に敬意を払い、スプリントが失敗しても誰か1人の責任にしない。マネージャーではなくチーム全体が、自己組織化と自律によって、グループで解決策を調べて「個人の」問題を解決するという姿勢をとる。また、専門のコンサルタントを雇ってたりない知識を補うなどといった難問に対応するための権限とリソースを与えられる。
//}

@<strong>{・勇気を出すこと}

//quote{
経営陣は、勇気を持って、適用型の計画や方向性を示し、メンバー個人やチームを信用してスプリントを行う方法に口出ししないようにする。チームは自主性と自己管理を必要とする仕事に勇気を持ってあたる。
//}

アジャイルを成功させる方法は「コミットすること」に集約されていますが、最終的には、「敬意を払う」「勇気を出す」といった、技術ではなくマインドが大事なんだなということを再認識するとともに、IT業界に○○信者や○○教といった言葉がはびこっている理由もなんとなくわかってしまいました。アジャイル開発をしていない人にも敬意を払いましょう！

そして、『初めてのアジャイル開発』を執筆したCraig Larman氏に敬意を払いたいと思います。『初めてのアジャイル開発』では、紹介した項目以外にもウォータフォールが新規製品開発に向かない理由、アジャイルを導入する理由、失敗する方法、スクラムが成功する価値について詳細がまとめられていますので、ぜひ手にとってみてはいかがでしょうか。



　

//embed{
    \begin{minipage}{.1\linewidth}
        \centering
        \includegraphics[width=.75\linewidth]{images/chap-sft2021/icon.png}
    \end{minipage}
    \begin{minipage}{.89\linewidth}
        伊藤 慶紀\\
        \end{minipage}
    \hspace{1ex}
//}

大手SIerにて業務用アプリケーションの開発に従事。ウォーターフォールはなぜ炎上するのか疑問を感じ、アジャイルに目覚め、一時期、休職してアメリカに語学留学。
Facebookの勢いを目の当たりにしたのち、帰国後、クラウド関連のサービス・プロダクト企画・立ち上げを行う。
その後、ベンチャーに転職し、個人向けアプリ・WebサービスのPM、社内システム刷新などさまざまなプロジェクト経験を経てSHIFTに入社。
趣味は将棋、ドライブ、ラーメン、花火、読書など。
